import json
import logging
import re
import time
from django.http import JsonResponse
from django.views import View
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import ensure_csrf_cookie
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.core.cache import cache

from .ai_services import (
    get_gemini_response,
    get_faq_answer,
    get_feature_explanation,
    get_interactive_tour_step,
    get_post_creation_suggestion,
    get_subscription_recommendations,
    check_post_content,
    analyze_profile_stats,
    generate_post_ideas,
    analyze_sentiment,
    find_post_by_keyword,
    get_post_details,
    find_user_by_username,
    get_user_activity
)

logger = logging.getLogger(__name__)


def check_rate_limit(user_identifier, max_requests=15, window=60):
    """
     –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê: –ú–∞–∫—Å–∏–º—É–º 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/IP
    """
    key = f"ai_requests_{user_identifier}"
    requests = cache.get(key, [])
    now = time.time()

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    requests = [req for req in requests if now - req < window]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(requests) >= max_requests:
        return False, len(requests)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    requests.append(now)
    cache.set(key, requests, window)
    return True, len(requests)


@method_decorator(ensure_csrf_cookie, name='dispatch')  #  –ë–ï–ó–û–ü–ê–°–ù–û: —Ç—Ä–µ–±—É–µ—Ç CSRF —Ç–æ–∫–µ–Ω
class ChatWithAIView(View):
    """
     –ë–ï–ó–û–ü–ê–°–ù–´–ô view –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç CSRF —Ç–æ–∫–µ–Ω
    - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç rate limiting
    - –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–æ–≤
    """

    def post(self, request, *args, **kwargs):
        try:
            # ‚úÖ –ó–ê–©–ò–¢–ê 1: Rate Limiting
            if request.user.is_authenticated:
                user_identifier = f"user_{request.user.id}"
                username = request.user.username
            else:
                # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º IP
                user_identifier = f"ip_{self.get_client_ip(request)}"
                username = "–ì–æ—Å—Ç—å"

            allowed, request_count = check_rate_limit(user_identifier)
            if not allowed:
                logger.warning(f"Rate limit exceeded for {user_identifier}")
                return JsonResponse({
                    'error': f'–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. (–õ–∏–º–∏—Ç: 15 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω)'
                }, status=429)

            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logger.info(f"AI request {request_count}/15 from {username} ({user_identifier})")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            if request.content_type == 'application/json':
                data = json.loads(request.body)
            else:
                data = request.POST

            action_type = data.get('action_type')
            user_input = data.get('user_input', '')
            user_info = data.get('user_info', {})

            # ‚úÖ –ó–ê–©–ò–¢–ê 2: –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ (–ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è action_type)
            def validate_request_length(user_input: str, action_type: str, username: str):
                """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
                limits = {
                    'check_post_content': 5000,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
                    'post_creation_suggestion': 5000,  # –ü–æ–º–æ—â—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ—Å—Ç–∞
                    'analyze_sentiment': 3000,  # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                    'general_chat': 2000,  # –û–±—â–∏–π —á–∞—Ç
                    'faq': 1000,  # FAQ
                    'feature_explanation': 1000,  # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
                }

                limit = limits.get(action_type, 1000)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000

                if len(user_input) > limit:
                    logger.warning(
                        f"Too long request from {username}: {len(user_input)} chars, limit: {limit}, action: {action_type}")
                    return False, f'–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –ú–∞–∫—Å–∏–º—É–º {limit} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è.'

                return True, ""

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è action_type
            is_valid, error_msg = validate_request_length(user_input, action_type, username)
            if not is_valid:
                return JsonResponse({'error': error_msg}, status=400)

            # ‚úÖ –ó–ê–©–ò–¢–ê 3: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è action_type
            allowed_actions = {
                'faq', 'feature_explanation', 'general_chat', 'interactive_tour_step',
                'post_creation_suggestion', 'subscription_recommendations', 'check_post_content',
                'analyze_profile', 'generate_post_ideas', 'analyze_sentiment',
                'find_post_by_keyword', 'get_post_details', 'find_user_by_username',
                'get_user_activity'
            }

            if action_type and action_type not in allowed_actions:
                logger.warning(f"Invalid action_type from {username}: {action_type}")
                return JsonResponse({
                    'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è'
                }, status=400)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if request.user.is_authenticated:
                user_info.update({
                    'user_id': request.user.id,
                    'username': request.user.username,
                    'is_authenticated': True
                })
            else:
                user_info.update({
                    'user_id': None,
                    'username': user_info.get('username', '–ì–æ—Å—Ç—å'),
                    'is_authenticated': False
                })

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–æ –Ω–µ –≤–µ—Å—å user_input –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏)
            logger.info(
                f"AI request: action={action_type}, user={user_info.get('username')}, "
                f"input_length={len(user_input)}, chars='{user_input[:30]}...'"
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
            try:
                if action_type == 'faq':
                    if not user_input:
                        return JsonResponse({'error': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å'}, status=400)
                    ai_response = get_faq_answer(question=user_input, user_info=user_info)

                elif action_type == 'feature_explanation':
                    if not user_input:
                        return JsonResponse({'error': '–£–∫–∞–∂–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'}, status=400)
                    ai_response = get_feature_explanation(feature_query=user_input, user_info=user_info)

                elif action_type == 'general_chat':
                    if not user_input:
                        ai_response = f"–ü—Ä–∏–≤–µ—Ç, {user_info.get('username')}! üëã –Ø —Ç–≤–æ–π –ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
                        ai_response = self.handle_natural_language_query(user_input, user_info)

                elif action_type == 'interactive_tour_step':
                    step_number = data.get('step_number')
                    if step_number is None:
                        return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —à–∞–≥–∞'}, status=400)
                    try:
                        step_number = int(step_number)
                        if step_number < 1 or step_number > 10:  # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                            return JsonResponse({'error': '–ù–æ–º–µ—Ä —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10'}, status=400)
                    except ValueError:
                        return JsonResponse({'error': '–ù–æ–º–µ—Ä —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'}, status=400)
                    ai_response = get_interactive_tour_step(step_number=step_number, user_info=user_info)

                elif action_type == 'post_creation_suggestion':
                    current_text = data.get('current_text', '')
                    if len(current_text) > 5000:  # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
                        return JsonResponse({'error': '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞'}, status=400)
                    ai_response = get_post_creation_suggestion(current_text=current_text, user_info=user_info)

                elif action_type == 'subscription_recommendations':
                    current_user_id = user_info.get('user_id') if user_info.get('is_authenticated') else None
                    ai_response = get_subscription_recommendations(user_info=user_info, current_user_id=current_user_id)

                elif action_type == 'check_post_content':
                    if not user_input:
                        return JsonResponse({'error': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'}, status=400)
                    if len(user_input) > 5000:  # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        return JsonResponse({'error': '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'}, status=400)
                    ai_response = check_post_content(post_text=user_input, user_info=user_info)

                elif action_type == 'analyze_profile':
                    if not user_info.get('is_authenticated'):
                        ai_response = "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
                    else:
                        ai_response = analyze_profile_stats(user_id=user_info.get('user_id'))

                elif action_type == 'generate_post_ideas':
                    tags = data.get('tags', [])
                    if len(tags) > 10:  # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–≥–æ–≤
                        return JsonResponse({'error': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–≥–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10)'}, status=400)
                    ai_response = generate_post_ideas(user_info=user_info, tags=tags)

                elif action_type == 'analyze_sentiment':
                    if not user_input:
                        return JsonResponse({'error': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}, status=400)
                    ai_response = analyze_sentiment(text=user_input)

                elif action_type == 'find_post_by_keyword':
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ user_input
                    keyword = self.extract_keyword_for_posts(user_input)
                    if not keyword:
                        return JsonResponse({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞'}, status=400)
                    if len(keyword) > 100:  # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                        return JsonResponse({'error': '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'}, status=400)
                    logger.info(f"Extracted keyword for post search: '{keyword}'")
                    ai_response = find_post_by_keyword(keyword=keyword, user_info=user_info)

                elif action_type == 'get_post_details':
                    post_id = data.get('post_id')
                    if not post_id:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å ID –∏–∑ user_input
                        numbers = re.findall(r'\d+', user_input)
                        if numbers:
                            post_id = numbers[0]
                        else:
                            return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ—Å—Ç–∞'}, status=400)
                    try:
                        post_id = int(post_id)
                        if post_id < 1 or post_id > 999999:  # ‚úÖ –†–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                            return JsonResponse({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ—Å—Ç–∞'}, status=400)
                    except ValueError:
                        return JsonResponse({'error': 'ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'}, status=400)
                    ai_response = get_post_details(post_id=post_id, user_info=user_info)

                elif action_type == 'find_user_by_username':
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_input
                    username_search = self.extract_username(user_input)
                    if not username_search:
                        return JsonResponse({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}, status=400)
                    if len(username_search) > 150:  # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        return JsonResponse({'error': '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}, status=400)
                    logger.info(f"Extracted username: '{username_search}'")
                    ai_response = find_user_by_username(username=username_search, user_info=user_info)

                elif action_type == 'get_user_activity':
                    user_id_target = data.get('user_id_target')
                    if not user_id_target:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å ID –∏–∑ user_input
                        numbers = re.findall(r'\d+', user_input)
                        if numbers:
                            user_id_target = numbers[0]
                        else:
                            return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}, status=400)
                    try:
                        user_id_target = int(user_id_target)
                        if user_id_target < 1 or user_id_target > 999999:  # ‚úÖ –†–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                            return JsonResponse({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}, status=400)
                    except ValueError:
                        return JsonResponse({'error': 'ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'}, status=400)
                    ai_response = get_user_activity(user_id=user_id_target, user_info=user_info)

                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
                    ai_response = self.handle_natural_language_query(user_input, user_info)

            except Exception as action_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {action_error}")
                ai_response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üçä"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            self.save_usage_stats(action_type, user_info, user_identifier)

            # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
            if len(ai_response) > 5000:
                ai_response = ai_response[:4900] + "\n\n... (–æ—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"

            logger.info(f"AI response length: {len(ai_response)} chars for {username}")

            return JsonResponse({
                'response': ai_response,
                'timestamp': timezone.now().isoformat()
            })

        except json.JSONDecodeError:
            logger.error("JSON decode error in ChatWithAIView")
            return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}, status=400)
        except Exception as e:
            logger.error(f"Unexpected error in ChatWithAIView: {e}")
            return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)

    def get_client_ip(self, request):
        """‚úÖ –ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è rate limiting –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip

    def extract_username(self, user_input: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        lower_input = user_input.lower().strip()

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
        patterns_to_try = [
            # "–Ω–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Orange"
            r'(?:–Ω–∞–π–¥–∏|–Ω–∞–π—Ç–∏|–∏—â–∏|–∏—Å–∫–∞—Ç—å|–ø–æ–∫–∞–∂–∏)\s+(?:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è|—é–∑–µ—Ä–∞)\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            # "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Orange"
            r'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            # "–ø—Ä–æ—Ñ–∏–ª—å Orange"
            r'–ø—Ä–æ—Ñ–∏–ª—å\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            # "@Orange"
            r'@([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            # "–≤ –ø—Ä–æ—Ñ–∏–ª–µ Orange"
            r'–≤\s+–ø—Ä–æ—Ñ–∏–ª–µ\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            # "–∫—Ç–æ —Ç–∞–∫–æ–π Orange"
            r'–∫—Ç–æ\s+—Ç–∞–∫–æ–π\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
        ]

        for pattern in patterns_to_try:
            match = re.search(pattern, lower_input, re.IGNORECASE)
            if match:
                return match.group(1)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–∫–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥
        words = user_input.split()
        for i, word in enumerate(words):
            if word.lower() in ['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '—é–∑–µ—Ä–∞', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ø—Ä–æ—Ñ–∏–ª—å'] and i + 1 < len(words):
                return words[i + 1].replace('@', '').strip()

        return None

    def extract_keyword_for_posts(self, user_input: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤."""
        lower_input = user_input.lower().strip()

        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_posts_indicators = [
            '—Å—Ç–∞—Ç—å–∏ —É', '–ø–æ—Å—Ç—ã —É', '–∫–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ —É', '–∫–∞–∫–∏–µ –ø–æ—Å—Ç—ã —É',
            '—Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            '—Å—Ç–∞—Ç—å–∏ –æ—Ç', '–ø–æ—Å—Ç—ã –æ—Ç',
            '—á—Ç–æ –ø–∏—Å–∞–ª', '—á—Ç–æ –ø–∏—Å–∞–ª–∞'
        ]

        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ù–ï –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        if any(indicator in lower_input for indicator in user_posts_indicators):
            logger.info("This is a user posts query, not extracting keyword")
            return None

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö –∏–ª–∏ –∫–∞–≤—ã—á–∫–∞—Ö
        bracket_match = re.search(r'[(\[]([^)\]]+)[)\]]', user_input)
        if bracket_match:
            keyword = bracket_match.group(1).strip()
            logger.info(f"Found keyword in brackets: '{keyword}'")
            return keyword

        # –ò—â–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–≥–æ–≤
        keyword_patterns = [
            r'–ø—Ä–æ\s+(.+)',
            r'–æ\s+(.+)',
            r'–æ–±\s+(.+)',
            r'–ø–æ\s+—Ç–µ–º–µ\s+(.+)',
            r'–Ω–∞\s+—Ç–µ–º—É\s+(.+)',
            # –î–ª—è "–Ω–∞–π–¥–∏ –ø–æ—Å—Ç XXXX"
            r'(?:–Ω–∞–π–¥–∏|–Ω–∞–π—Ç–∏|–∏—â–∏|–∏—Å–∫–∞—Ç—å)\s+(?:–ø–æ—Å—Ç|–ø–æ—Å—Ç—ã|—Å—Ç–∞—Ç—å|—Å—Ç–∞—Ç—å–∏)\s+(.+)',
            # –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ "–ø–æ—Å—Ç"
            r'–ø–æ—Å—Ç\s+(.+)',
            r'–ø–æ—Å—Ç—ã\s+(.+)',
            r'—Å—Ç–∞—Ç—å–∏?\s+(.+)'
        ]

        for pattern in keyword_patterns:
            match = re.search(pattern, lower_input)
            if match:
                keyword = match.group(1).strip()
                # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
                keyword = re.sub(r'[?!.,:;]+$', '', keyword)

                # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ "—É username"
                if keyword.startswith('—É '):
                    logger.info(f"Skipping '—É username' pattern: '{keyword}'")
                    return None

                return keyword

        return None

    def handle_natural_language_query(self, user_input: str, user_info: dict) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ."""

        lower_input = user_input.lower().strip()

        logger.info(f"Processing natural language query: '{user_input}' from {user_info.get('username', 'anonymous')}")

        # ===============================
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–ò–°–ö –ü–û–°–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        # ===============================

        # –£–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        clean_input = re.sub(r'\*\*(.*?)\*\*', r'\1', user_input)
        clean_lower = clean_input.lower().strip()

        # –°–£–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_posts_indicators = [
            '—Å—Ç–∞—Ç—å–∏ —É', '–ø–æ—Å—Ç—ã —É', '–∫–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ —É', '–∫–∞–∫–∏–µ –ø–æ—Å—Ç—ã —É',
            '—Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            '—Å—Ç–∞—Ç—å–∏ –æ—Ç', '–ø–æ—Å—Ç—ã –æ—Ç',
            '—á—Ç–æ –ø–∏—Å–∞–ª', '—á—Ç–æ –ø–∏—Å–∞–ª–∞',
            '—Å—Ç–∞—Ç—å–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ø–æ—Å—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        ]

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ (–ë–ï–ó **—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**)
        username_patterns = [
            r'(?:—Å—Ç–∞—Ç—å–∏|–ø–æ—Å—Ç—ã)\s+—É\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            r'(?:—Å—Ç–∞—Ç—å–∏|–ø–æ—Å—Ç—ã)\s+–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            r'—á—Ç–æ\s+(?:–ø–∏—Å–∞–ª|–ø–∏—Å–∞–ª–∞)\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            r'–∫–∞–∫–∏–µ\s+(?:—Å—Ç–∞—Ç—å–∏|–ø–æ—Å—Ç—ã)\s+—É\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            r'(?:—Å—Ç–∞—Ç—å–∏|–ø–æ—Å—Ç—ã)\s+–æ—Ç\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            r'(?:—Å—Ç–∞—Ç—å–∏|–ø–æ—Å—Ç—ã)\s+—É\s+–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)',
            # –î–ª—è "–∫–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ Orange" (–±–µ–∑ –ø—Ä–µ–¥–ª–æ–≥–æ–≤)
            r'–∫–∞–∫–∏–µ\s+(?:—Å—Ç–∞—Ç—å–∏|–ø–æ—Å—Ç—ã)\s+([A-Za-z0-9_–ê-–Ø–∞-—è-]+)(?:\s|$|\?)',
        ]

        # –ü–†–û–í–ï–†–Ø–ï–ú: —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
        contains_user_posts_indicator = any(indicator in clean_lower for indicator in user_posts_indicators)

        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è "–∫–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ Username"
        if not contains_user_posts_indicator:
            if re.search(r'–∫–∞–∫–∏–µ\s+(?:—Å—Ç–∞—Ç—å–∏|–ø–æ—Å—Ç—ã)\s+[A-Za-z0-9_–ê-–Ø–∞-—è-]+', clean_lower):
                contains_user_posts_indicator = True

        if contains_user_posts_indicator:
            logger.info("DETECTED: User posts query - prioritizing user search")

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = None
            for pattern in username_patterns:
                match = re.search(pattern, clean_input, re.IGNORECASE)
                if match:
                    username = match.group(1)
                    logger.info(f"Extracted username: '{username}' via pattern: {pattern}")
                    break

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
            if not username:
                words = clean_input.split()
                for i, word in enumerate(words):
                    if word.lower() in ['—Å—Ç–∞—Ç—å–∏', '–ø–æ—Å—Ç—ã']:
                        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ç—å–∏/–ø–æ—Å—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ
                        for j in range(i + 1, len(words)):
                            next_word = words[j].strip('?!.,')
                            if (next_word.lower() not in ['—É', '–æ—Ç', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ø—Ä–æ', '–æ', '–æ–±', '–ø–æ', '—Å'] and
                                    len(next_word) > 1 and re.match(r'^[A-Za-z0-9_–ê-–Ø–∞-—è-]+$', next_word)):
                                username = next_word
                                logger.info(f"Extracted username via fallback: '{username}'")
                                break
                        if username:
                            break

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—â–µ–º –µ–≥–æ –ø–æ—Å—Ç—ã
            if username:
                try:
                    from posts.models import Post
                    from users.models import CustomUser

                    user = CustomUser.objects.get(username__iexact=username)
                    user_posts = Post.objects.filter(author=user).order_by('-pub_date')[:10]

                    if user_posts.exists():
                        posts_info = []
                        for post in user_posts:
                            try:
                                post_url = post.get_absolute_url() if hasattr(post,
                                                                              'get_absolute_url') else f"/posts/{post.id}/"
                            except:
                                post_url = f"/posts/{post.id}/"
                            posts_info.append(f"‚Ä¢ **{post.title}**\n  –°—Å—ã–ª–∫–∞: {post_url}")

                        posts_list = "\n\n".join(posts_info)
                        return f"üìù **–ü–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:**\n\n{posts_list}\n\nüí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ—Å—Ç–µ, –Ω–∞–ø–∏—à–∏: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å—Ç–µ [ID]'"
                    else:
                        return f"üìù –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."

                except CustomUser.DoesNotExist:
                    return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
                except Exception as e:
                    logger.error(f"Error searching posts by user {username}: {e}")
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}"
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
                return """üîç –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:

    **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:**
    ‚Ä¢ '–ö–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ —É Orange?'
    ‚Ä¢ '–ü–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Alek'  
    ‚Ä¢ '–ß—Ç–æ –ø–∏—Å–∞–ª Orange?'
    ‚Ä¢ '–°—Ç–∞—Ç—å–∏ –æ—Ç Orange'"""

        # ===============================
        # –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
        # ===============================

        general_post_search_patterns = [
            '–Ω–∞–π–¥–∏ –ø–æ—Å—Ç', '–Ω–∞–π—Ç–∏ –ø–æ—Å—Ç', '–∏—â–∏ –ø–æ—Å—Ç', '–∏—Å–∫–∞—Ç—å –ø–æ—Å—Ç',
            '–Ω–∞–π–¥–∏ —Å—Ç–∞—Ç—å', '–Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å', '–ø–æ–∫–∞–∂–∏ –ø–æ—Å—Ç',
            '–Ω–∞–π–¥–∏ –ø–æ—Å—Ç—ã –ø—Ä–æ', '–Ω–∞–π—Ç–∏ –ø–æ—Å—Ç—ã –ø—Ä–æ', '–∏—â–∏ –ø–æ—Å—Ç—ã –ø—Ä–æ'
        ]

        if any(pattern in lower_input for pattern in general_post_search_patterns):
            logger.info("Detected general post search query")
            keyword = self.extract_keyword_for_posts(user_input)
            if keyword:
                logger.info(f"Searching posts with keyword: '{keyword}'")
                return find_post_by_keyword(keyword, user_info)
            else:
                return """üîç –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä—ã:

    **–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ:**
    ‚Ä¢ '–ù–∞–π–¥–∏ –ø–æ—Å—Ç—ã –ø—Ä–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
    ‚Ä¢ '–ù–∞–π–¥–∏ –ø–æ—Å—Ç (QLED —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã)'

    **–ü–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
    ‚Ä¢ '–ö–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ —É Orange?'
    ‚Ä¢ '–ü–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Alek'
    ‚Ä¢ '–ß—Ç–æ –ø–∏—Å–∞–ª Orange?'"""

        # === –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
        user_search_patterns = [
            '–Ω–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–∏—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            '–Ω–∞–π–¥–∏ —é–∑–µ—Ä–∞', '–ø—Ä–æ—Ñ–∏–ª—å', '–∫—Ç–æ —Ç–∞–∫–æ–π'
        ]

        if any(pattern in lower_input for pattern in user_search_patterns):
            username = self.extract_username(user_input)
            if username:
                logger.info(f"Searching user: '{username}'")
                return find_user_by_username(username, user_info)
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–ù–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [–∏–º—è]'"

        # === –î–ï–¢–ê–õ–ò –ü–û–°–¢–ê ===
        post_detail_patterns = [
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å—Ç–µ', '–ø–æ—Å—Ç –Ω–æ–º–µ—Ä', '–ø–æ—Å—Ç id', '–¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞',
            '–ø–æ–∫–∞–∂–∏ –ø–æ—Å—Ç', '—á—Ç–æ –≤ –ø–æ—Å—Ç–µ', '–æ—Ç–∫—Ä–æ–π –ø–æ—Å—Ç'
        ]

        if any(pattern in lower_input for pattern in post_detail_patterns):
            numbers = re.findall(r'\d+', user_input)
            if numbers:
                try:
                    post_id = int(numbers[0])
                    logger.info(f"Getting post details for ID: {post_id}")
                    return get_post_details(post_id, user_info)
                except ValueError:
                    pass

            return "üî¢ –£–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å—Ç–µ 5' –∏–ª–∏ '–ü–æ–∫–∞–∂–∏ –ø–æ—Å—Ç 123'"

        # === –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        activity_patterns = [
            '—á—Ç–æ –Ω–æ–≤–æ–≥–æ —É', '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '—á—Ç–æ –¥–µ–ª–∞–µ—Ç',
            '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã', '–Ω–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
        ]

        if any(pattern in lower_input for pattern in activity_patterns):
            numbers = re.findall(r'\d+', user_input)
            if numbers:
                try:
                    user_id = int(numbers[0])
                    logger.info(f"Getting user activity for ID: {user_id}")
                    return get_user_activity(user_id, user_info)
                except ValueError:
                    pass

            username_patterns = [
                r'—á—Ç–æ\s+–Ω–æ–≤–æ–≥–æ\s+—É\s+(\w+)',
                r'–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\s+–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\s+(\w+)',
                r'—á—Ç–æ\s+–¥–µ–ª–∞–µ—Ç\s+(\w+)'
            ]

            for pattern in username_patterns:
                match = re.search(pattern, lower_input)
                if match:
                    username = match.group(1)
                    try:
                        from users.models import CustomUser
                        user = CustomUser.objects.get(username__iexact=username)
                        return get_user_activity(user.id, user_info)
                    except CustomUser.DoesNotExist:
                        return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    except Exception as e:
                        logger.error(f"Error getting user activity: {e}")
                        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

            return "üë§ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1?' –∏–ª–∏ '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Orange'"

        # === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
        recommendation_patterns = [
            '–∫–æ–≥–æ –ø–æ—á–∏—Ç–∞—Ç—å', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–ø–æ—Å–æ–≤–µ—Ç—É–π –∞–≤—Ç–æ—Ä–æ–≤',
            '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã', '–Ω–∞ –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'
        ]

        if any(pattern in lower_input for pattern in recommendation_patterns):
            logger.info("Getting subscription recommendations")
            current_user_id = user_info.get('user_id') if user_info.get('is_authenticated') else None
            return get_subscription_recommendations(user_info, current_user_id)

        # === –û–ë–©–ò–ô –ß–ê–¢ ===
        logger.info(f"Processing as general chat: '{user_input}'")

        help_suggestions = []

        if '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' in lower_input or '—é–∑–µ—Ä' in lower_input:
            help_suggestions.append("üí° –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '–ù–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [–∏–º—è]'")

        if '–ø–æ—Å—Ç' in lower_input or '—Å—Ç–∞—Ç—å' in lower_input:
            help_suggestions.append("üí° –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤: '–ù–∞–π–¥–∏ –ø–æ—Å—Ç—ã –ø—Ä–æ [—Ç–µ–º–∞]'")
            help_suggestions.append("üí° –î–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å—Ç–µ [ID]'")
            help_suggestions.append("üí° –î–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–∫–æ–±–∫–∞—Ö: '–ù–∞–π–¥–∏ –ø–æ—Å—Ç (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)'")

        if '—Ä–µ–∫–æ–º–µ–Ω–¥' in lower_input or '—Å–æ–≤–µ—Ç' in lower_input:
            help_suggestions.append("üí° –î–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: '–ö–æ–≥–æ –ø–æ—á–∏—Ç–∞—Ç—å?'")

        prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info.get('username')} –ø–∏—à–µ—Ç: '{user_input}'
        –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å Chatty Orange.

        –û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. 

        {f'–î–æ–±–∞–≤—å —ç—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞: {chr(10).join(help_suggestions)}' if help_suggestions else ''}

        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ, –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:
        - "–ù–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [–∏–º—è]" - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π
        - "–ù–∞–π–¥–∏ –ø–æ—Å—Ç—ã –ø—Ä–æ [—Ç–µ–º–∞]" –∏–ª–∏ "–ù–∞–π–¥–∏ –ø–æ—Å—Ç (—Ç–µ–º–∞)" - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
        - "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å—Ç–µ [ID]" - –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞
        - "–ö–æ–≥–æ –ø–æ—á–∏—Ç–∞—Ç—å?" - –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """

        return get_gemini_response(prompt)

    def get(self, request, *args, **kwargs):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API."""
        return JsonResponse({
            'message': 'Chatty Orange AI Assistant API',
            'version': '2.2',  # ‚úÖ –û–±–Ω–æ–≤–∏–ª–∏ –≤–µ—Ä—Å–∏—é
            'status': 'active',
            'security': 'CSRF + Rate Limiting enabled',  # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∑–∞—â–∏—â–µ–Ω–æ
            'rate_limit': '15 requests per minute',
            'endpoints': {
                'faq': '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∞–π—Ç–µ',
                'feature_explanation': '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π',
                'general_chat': '–û–±—â–∏–π —á–∞—Ç',
                'interactive_tour_step': '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä',
                'post_creation_suggestion': '–ü–æ–º–æ—â—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤',
                'subscription_recommendations': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫',
                'check_post_content': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                'analyze_profile': '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è',
                'generate_post_ideas': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π',
                'analyze_sentiment': '–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
                'find_post_by_keyword': '–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É',
                'get_post_details': '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞ –ø–æ ID',
                'find_user_by_username': '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏',
                'get_user_activity': '–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID'
            },
            'natural_language_examples': [
                '–ù–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Orange',
                '–ù–∞–π–¥–∏ –ø–æ—Å—Ç—ã –ø—Ä–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
                '–ù–∞–π–¥–∏ –ø–æ—Å—Ç (QLED —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã)',
                '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å—Ç–µ 5',
                '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1?',
                '–ö–æ–≥–æ –ø–æ—á–∏—Ç–∞—Ç—å?'
            ]
        })

    def save_usage_stats(self, action_type, user_info, user_identifier):
        """‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info(
                f"AI usage: action={action_type}, "
                f"user={user_info.get('username', 'anonymous')}, "
                f"identifier={user_identifier}, "
                f"auth={user_info.get('is_authenticated', False)}"
            )

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä: AIUsageLog.objects.create(...)

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")