import json
import logging
from django.http import JsonResponse
from django.views import View
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required
from django.utils import timezone

from .ai_services import (
    get_gemini_response,
    get_faq_answer,
    get_feature_explanation,
    get_interactive_tour_step,
    get_post_creation_suggestion,
    get_subscription_recommendations,
    check_post_content,
    analyze_profile_stats,
    generate_post_ideas,
    analyze_sentiment
)

logger = logging.getLogger(__name__)


@method_decorator(csrf_exempt, name='dispatch')
class ChatWithAIView(View):
    """–û—Å–Ω–æ–≤–Ω–æ–π view –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º."""

    def post(self, request, *args, **kwargs):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            if request.content_type == 'application/json':
                data = json.loads(request.body)
            else:
                data = request.POST

            action_type = data.get('action_type')
            user_input = data.get('user_input', '')
            user_info = data.get('user_info', {})

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if request.user.is_authenticated:
                user_info.update({
                    'user_id': request.user.id,
                    'username': request.user.username,
                    'is_authenticated': True
                })
            else:
                user_info.update({
                    'user_id': None,
                    'username': user_info.get('username', '–ì–æ—Å—Ç—å'),
                    'is_authenticated': False
                })

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            logger.info(f"AI request: action={action_type}, user={user_info.get('username')}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
            if action_type == 'faq':
                if not user_input:
                    return JsonResponse({'error': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å'}, status=400)
                ai_response = get_faq_answer(question=user_input, user_info=user_info)

            elif action_type == 'feature_explanation':
                if not user_input:
                    return JsonResponse({'error': '–£–∫–∞–∂–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'}, status=400)
                ai_response = get_feature_explanation(feature_query=user_input, user_info=user_info)

            elif action_type == 'general_chat':
                if not user_input:
                    ai_response = f"–ü—Ä–∏–≤–µ—Ç, {user_info.get('username')}! üëã –Ø —Ç–≤–æ–π –ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                else:
                    prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info.get('username')} –ø–∏—à–µ—Ç: '{user_input}'
                    –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å Chatty Orange.
                    –û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."""
                    ai_response = get_gemini_response(prompt)

            elif action_type == 'interactive_tour_step':
                step_number = data.get('step_number')
                if step_number is None:
                    return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —à–∞–≥–∞'}, status=400)
                try:
                    step_number = int(step_number)
                except ValueError:
                    return JsonResponse({'error': '–ù–æ–º–µ—Ä —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'}, status=400)
                ai_response = get_interactive_tour_step(step_number=step_number, user_info=user_info)

            elif action_type == 'post_creation_suggestion':
                current_text = data.get('current_text', '')
                ai_response = get_post_creation_suggestion(current_text=current_text, user_info=user_info)

            elif action_type == 'subscription_recommendations':
                current_user_id = user_info.get('user_id')
                ai_response = get_subscription_recommendations(user_info=user_info, current_user_id=current_user_id)

            elif action_type == 'check_post_content':
                if not user_input:
                    return JsonResponse({'error': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'}, status=400)
                ai_response = check_post_content(post_text=user_input, user_info=user_info)

            elif action_type == 'analyze_profile':
                if not user_info.get('is_authenticated'):
                    ai_response = "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
                else:
                    ai_response = analyze_profile_stats(user_id=user_info.get('user_id'))

            elif action_type == 'generate_post_ideas':
                tags = data.get('tags', [])
                ai_response = generate_post_ideas(user_info=user_info, tags=tags)

            elif action_type == 'analyze_sentiment':
                if not user_input:
                    return JsonResponse({'error': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}, status=400)
                ai_response = analyze_sentiment(text=user_input)

            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
                logger.warning(f"Unknown action_type: {action_type}")
                ai_response = "ü§î –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —ç—Ç–æ –¥–µ–ª–∞—Ç—å, –Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é."

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            self.save_usage_stats(action_type, user_info)

            return JsonResponse({
                'response': ai_response,
                'timestamp': timezone.now().isoformat()
            })

        except json.JSONDecodeError:
            logger.error("JSON decode error in ChatWithAIView")
            return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}, status=400)
        except Exception as e:
            logger.error(f"Unexpected error in ChatWithAIView: {e}")
            return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)

    def get(self, request, *args, **kwargs):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API."""
        return JsonResponse({
            'message': 'Chatty Orange AI Assistant API',
            'version': '2.0',
            'endpoints': {
                'faq': '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∞–π—Ç–µ',
                'feature_explanation': '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π',
                'general_chat': '–û–±—â–∏–π —á–∞—Ç',
                'interactive_tour_step': '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä',
                'post_creation_suggestion': '–ü–æ–º–æ—â—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤',
                'subscription_recommendations': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫',
                'check_post_content': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                'analyze_profile': '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è',
                'generate_post_ideas': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π',
                'analyze_sentiment': '–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'
            }
        })

    def save_usage_stats(self, action_type, user_info):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò (–¥–ª—è –±—É–¥—É—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)."""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        pass