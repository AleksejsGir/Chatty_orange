# Chatty_orange/Chatty_orange/settings.py

"""
Django settings for Chatty_orange project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Загружаем переменные окружения из .env файла
load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'default-insecure-secret-key-for-dev')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')

# ALLOWED_HOSTS можно будет позже тоже вынести в .env
ALLOWED_HOSTS = []
if DEBUG:
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # --- Наши приложения ---
    'users.apps.UsersConfig',
    'posts.apps.PostsConfig',
    'subscriptions.apps.SubscriptionsConfig',
    # 'core.apps.CoreConfig', # Если бы создали core приложение

    #--- Сторонние приложения ---
    'allauth',             # Будет добавлено позже для allauth
    'allauth.account',     # Будет добавлено позже для allauth
    'allauth.socialaccount', # Если нужна соц. аутентификация
    'django_bootstrap5',   # Добавлено для интеграции Bootstrap
    'debug_toolbar',       # Для панели отладки
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware', # Добавить для debug toolbar
    'allauth.account.middleware.AccountMiddleware', # Будет добавлено позже для allauth
]

ROOT_URLCONF = 'Chatty_orange.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Глобальная папка шаблонов
        'APP_DIRS': True, # Разрешаем поиск шаблонов внутри папок templates приложений
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # Обязателен для allauth и админки
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Chatty_orange.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.getenv('DB_NAME', BASE_DIR / 'db.sqlite3'),
        'USER': os.getenv('DB_USER', ''),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}
# Доп. проверка на случай, если .env не задан и используется SQLite
if DATABASES['default']['ENGINE'] == 'django.db.backends.sqlite3' and not isinstance(DATABASES['default']['NAME'], Path):
     DATABASES['default']['NAME'] = BASE_DIR / DATABASES['default']['NAME']


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Berlin' # Установлен часовой пояс
USE_I18N = True
USE_TZ = True # Оставляем поддержку часовых поясов


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# Папки, где Django будет искать статику помимо папки static внутри приложений
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
# Папка, куда будет собираться вся статика командой collectstatic (для production)
# STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files (User Uploads like avatars)
# URL-префикс для доступа к медиа-файлам через браузер
MEDIA_URL = '/media/'
# Путь в файловой системе, где будут храниться загруженные файлы
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Custom User Model ---
AUTH_USER_MODEL = 'users.CustomUser' # Указываем нашу кастомную модель пользователя


# --- Email Configuration ---
# Используем вывод в консоль для отладки (сброс пароля и т.д.)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# TODO: Настроить реальный email backend для production (e.g., SMTP)


# --- Authentication Settings ---
# URL, куда перенаправлять, если пользователь пытается получить доступ к странице,
# требующей логина, но не аутентифицирован. Имя URL-паттерна.
# LOGIN_URL = 'login' # Стандартное значение Django
LOGIN_URL = 'account_login' # Значение по умолчанию для django-allauth (установим позже)

# URL, куда перенаправлять после успешного входа (если не указан параметр 'next').
LOGIN_REDIRECT_URL = '/' # Перенаправляем на главную

# URL, куда перенаправлять после выхода.
LOGOUT_REDIRECT_URL = '/' # Перенаправляем на главную


# --- Django Allauth Settings (БУДУТ ДОБАВЛЕНЫ ПОЗЖЕ) ---
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # Стандартный бэкенд Django
    'allauth.account.auth_backends.AuthenticationBackend', # Бэкенд allauth
]
SITE_ID = 1 # Требуется для allauth


ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # или 'username' / 'email'

# ACCOUNT_LOGIN_METHODS = {'email', 'username'}


ACCOUNT_EMAIL_VERIFICATION = 'optional' # или 'mandatory' или 'none'
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_LOGOUT_ON_GET = False # Выход только через POST для безопасности
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[Chatty] ' # Префикс для тем писем


# --- Django Debug Toolbar Settings (если используется) ---
# INTERNAL_IPS = [
#     "127.0.0.1",
# ]


# <!-- TODO: Добавить настройки django-allauth при его интеграции. -->
# <!-- TODO: Настроить STATIC_ROOT для production. -->
# <!-- TODO: Настроить реальный EMAIL_BACKEND для production. -->
# <!-- TODO: Настроить INTERNAL_IPS и middleware для django-debug-toolbar. -->
# <!-- TODO: Добавить сторонние приложения (allauth, bootstrap5, debug_toolbar) в INSTALLED_APPS. -->