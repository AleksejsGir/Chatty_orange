document.addEventListener('DOMContentLoaded', function() {
    const CHAT_OPEN_STATE_KEY = 'chattyOrangeChatOpen';

    const assistant = document.querySelector('.assistant-container');
    const assistantImage = document.querySelector('.assistant-image');
    let menu = null;
    let isMenuOpen = false;
    let isMouseOverAssistant = false;
    let isMouseOverMenu = false;

    // Chat Widget Elements (–ù–ï –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ!)
    let chatWidget = null;
    let aiChatBody = null;
    let aiChatMessageInput = null;
    let aiSendMessageBtn = null;
    let isChatOpen = false;
    let isChatMinimized = false;

    const assistantContainer = document.querySelector('.assistant-container');
    const currentUsername = assistantContainer ? assistantContainer.dataset.username : null;

    let currentActionType = 'general_chat';

    // Interactive Tour Elements
    let currentTourStep = 1;
    const MAX_TOUR_STEPS = 4;
    let interactiveTourModal = null;
    let tourModalBody = null;
    let tourStepNumberSpan = null;
    let nextTourStepBtn = null;
    let endTourBtn = null;
    let closeTourModalBtn = null;
    let nextButtonListenerAttached = false;

    function getTourStorageKey() {
        if (currentUsername && currentUsername !== '–ì–æ—Å—Ç—å' && currentUsername.trim() !== '') {
            return `chattyOrangeTourCompleted_${currentUsername}`;
        }
        return 'chattyOrangeTourCompleted_guest';
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
    function detectCommandType(messageText) {
        const lowerText = messageText.toLowerCase().trim();

        const userSearchPatterns = [
            /–Ω–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/i, /–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/i, /–∏—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/i, /–∏—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/i,
            /–Ω–∞–π–¥–∏ —é–∑–µ—Ä–∞/i, /–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \w+/i, /–ø—Ä–æ—Ñ–∏–ª—å \w+/i, /–∫—Ç–æ —Ç–∞–∫–æ–π \w+/i, /–≤ –ø—Ä–æ—Ñ–∏–ª–µ \w+/i, /@\w+/i
        ];

        if (userSearchPatterns.some(pattern => pattern.test(lowerText))) {
            return 'find_user_by_username';
        }

        const postSearchPatterns = [
            /–Ω–∞–π–¥–∏ –ø–æ—Å—Ç/i, /–Ω–∞–π—Ç–∏ –ø–æ—Å—Ç/i, /–∏—â–∏ –ø–æ—Å—Ç/i, /–Ω–∞–π–¥–∏ —Å—Ç–∞—Ç—å/i, /–Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å/i,
            /–ø–æ—Å—Ç—ã –ø—Ä–æ/i, /—Å—Ç–∞—Ç—å–∏ –ø—Ä–æ/i, /–ø–æ—Å—Ç—ã –æ/i, /—Å—Ç–∞—Ç—å–∏ –æ/i
        ];

        if (postSearchPatterns.some(pattern => pattern.test(lowerText))) {
            return 'find_post_by_keyword';
        }

        const userPostsPatterns = [
            /—Å—Ç–∞—Ç—å–∏ —É \w+/i, /–ø–æ—Å—Ç—ã —É \w+/i, /–∫–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ —É/i, /–∫–∞–∫–∏–µ –ø–æ—Å—Ç—ã —É/i,
            /—á—Ç–æ –ø–∏—Å–∞–ª \w+/i, /–ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/i, /—Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/i
        ];

        if (userPostsPatterns.some(pattern => pattern.test(lowerText))) {
            return 'find_post_by_keyword';
        }

        const postDetailPatterns = [
            /—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å—Ç–µ/i, /–ø–æ—Å—Ç –Ω–æ–º–µ—Ä/i, /–ø–æ—Å—Ç \d+/i, /–ø–æ—Å—Ç id/i, /–¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞/i, /–ø–æ–∫–∞–∂–∏ –ø–æ—Å—Ç/i
        ];

        if (postDetailPatterns.some(pattern => pattern.test(lowerText))) {
            return 'get_post_details';
        }

        const activityPatterns = [
            /—á—Ç–æ –Ω–æ–≤–æ–≥–æ —É/i, /–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/i, /—á—Ç–æ –¥–µ–ª–∞–µ—Ç \w+/i, /–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã/i, /–Ω–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/i
        ];

        if (activityPatterns.some(pattern => pattern.test(lowerText))) {
            return 'get_user_activity';
        }

        const recommendationPatterns = [
            /–∫–æ–≥–æ –ø–æ—á–∏—Ç–∞—Ç—å/i, /—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏/i, /–ø–æ—Å–æ–≤–µ—Ç—É–π –∞–≤—Ç–æ—Ä–æ–≤/i, /–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã/i, /–Ω–∞ –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/i
        ];

        if (recommendationPatterns.some(pattern => pattern.test(lowerText))) {
            return 'subscription_recommendations';
        }

        const contentCheckPatterns = [
            /–ø—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç/i, /–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å—Ç/i, /–º–æ–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å/i, /—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º/i
        ];

        if (contentCheckPatterns.some(pattern => pattern.test(lowerText))) {
            return 'check_post_content';
        }

        const ideasPatterns = [
            /–∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç/i, /—á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å/i, /—Ç–µ–º–∞ –¥–ª—è –ø–æ—Å—Ç/i, /–ø—Ä–µ–¥–ª–æ–∂–∏ —Ç–µ–º—É/i, /–∏–¥–µ–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞/i
        ];

        if (ideasPatterns.some(pattern => pattern.test(lowerText))) {
            return 'generate_post_ideas';
        }

        const profilePatterns = [
            /–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/i, /–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è/i, /–º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å/i, /–∫–∞–∫ –¥–µ–ª–∞ —É –º–µ–Ω—è/i
        ];

        if (profilePatterns.some(pattern => pattern.test(lowerText))) {
            return 'analyze_profile';
        }

        return 'general_chat';
    }

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞
    function createMenu() {
        if (!menu) {
            menu = document.createElement('div');
            menu.className = 'assistant-menu';
            menu.innerHTML = `
                <h6 class="menu-title">üçä –ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫</h6>
                <div class="menu-section">
                    <a href="#" onclick="return window.showRules()">
                        <i class="fas fa-book-open me-2"></i>–ü—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞
                    </a>
                    <a href="#" onclick="return window.showGuide()">
                        <i class="fas fa-info-circle me-2"></i>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
                    </a>
                    <a href="#" id="startTourBtn">
                        <i class="fas fa-route me-2"></i>–ü—Ä–æ–π—Ç–∏ —Ç—É—Ä
                    </a>
                </div>
                <div class="menu-section">
                    <a href="#" id="showRecommendationsBtn">
                        <i class="fas fa-user-plus me-2"></i>–ö–æ–≥–æ –ø–æ—á–∏—Ç–∞—Ç—å?
                    </a>
                    <a href="#" id="showProfileStatsBtn">
                        <i class="fas fa-chart-line me-2"></i>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    </a>
                    <a href="#" id="showPostIdeasBtn">
                        <i class="fas fa-lightbulb me-2"></i>–ò–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤
                    </a>
                </div>
                <div class="menu-section">
                    <a href="#" onclick="return window.showAIAssistant()">
                        <i class="fas fa-comments me-2"></i>–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
                    </a>
                </div>
            `;
            if (assistant) {
                assistant.appendChild(menu);

                menu.addEventListener('mouseenter', function() {
                    isMouseOverMenu = true;
                });

                menu.addEventListener('mouseleave', function() {
                    isMouseOverMenu = false;
                    checkAndHideMenu();
                });
            }
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –º–µ–Ω—é
    function showMenu() {
        if (!assistant) return;
        createMenu();
        if (!menu) return;

        isMenuOpen = true;
        menu.classList.add('show');

        if (typeof gsap !== 'undefined') {
            gsap.to(assistantImage, { scale: 1.1, rotation: -10, duration: 0.3 });
        }
    }

    function hideMenu() {
        if (menu && isMenuOpen) {
            isMenuOpen = false;
            menu.classList.remove('show');

            if (typeof gsap !== 'undefined') {
                gsap.to(assistantImage, { scale: 1, rotation: 0, duration: 0.3 });
            }
        }
    }

    function checkAndHideMenu() {
        setTimeout(() => {
            if (!isMouseOverAssistant && !isMouseOverMenu && isMenuOpen) {
                hideMenu();
            }
        }, 100);
    }

    window.hideMenu = hideMenu;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–º–æ—â–Ω–∏–∫–∞
    if (assistantImage) {
        assistantImage.addEventListener('click', function(e) {
            e.stopPropagation();
            if (isMenuOpen) {
                hideMenu();
            } else {
                showMenu();
            }
        });

        assistantImage.addEventListener('mouseenter', function() {
            isMouseOverAssistant = true;
            if (!isMenuOpen) showMenu();
        });

        assistantImage.addEventListener('mouseleave', function() {
            isMouseOverAssistant = false;
            checkAndHideMenu();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', function(e) {
        if (isMenuOpen && assistant && !assistant.contains(e.target) &&
            !e.target.closest('.chat-widget')) {
            hideMenu();
        }
    });

    // ============ –ù–û–í–´–ô –ß–ê–¢ –í–ò–î–ñ–ï–¢ (–ù–ï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û!) ============
    function createChatWidget() {
        if (chatWidget) return;

        chatWidget = document.createElement('div');
        chatWidget.className = 'chat-widget';
        chatWidget.innerHTML = `
            <div class="chat-widget-header">
                <div class="chat-widget-title">
                    <img src="/static/images/orange.png" alt="Orange" style="width: 24px; height: 24px; margin-right: 8px;">
                    <span>–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫</span>
                </div>
                <div class="chat-widget-controls">
                    <button class="chat-btn chat-btn-minimize" onclick="window.minimizeChat()" title="–°–≤–µ—Ä–Ω—É—Ç—å">
                        <i class="fas fa-minus"></i>
                    </button>
                    <button class="chat-btn chat-btn-expand" onclick="window.expandChat()" title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å" style="display: none;">
                        <i class="fas fa-expand"></i>
                    </button>
                    <button class="chat-btn chat-btn-close" onclick="window.closeChat()" title="–ó–∞–∫—Ä—ã—Ç—å">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="chat-widget-body">
                <!-- –ß–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å—é–¥–∞ -->
            </div>
            <div class="chat-widget-footer">
                <textarea class="chat-input" placeholder="–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è —á—Ç–æ-–Ω–∏–±—É–¥—å..." rows="2"></textarea>
                <button class="chat-send-btn">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
            <div class="chat-widget-resizer"></div>
        `;

        document.body.appendChild(chatWidget);

        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        aiChatBody = chatWidget.querySelector('.chat-widget-body');
        aiChatMessageInput = chatWidget.querySelector('.chat-input');
        aiSendMessageBtn = chatWidget.querySelector('.chat-send-btn');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (aiSendMessageBtn) {
            aiSendMessageBtn.addEventListener('click', sendChatMessage);
        }

        if (aiChatMessageInput) {
            aiChatMessageInput.addEventListener('keypress', function(event) {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    sendChatMessage();
                }
            });
        }

        // –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
        const resizer = chatWidget.querySelector('.chat-widget-resizer');
        if (resizer) {
            resizer.addEventListener('mousedown', function(e_mousedown) {
                e_mousedown.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

                const initialWidth = chatWidget.offsetWidth;
                const initialHeight = chatWidget.offsetHeight;
                const initialMouseX = e_mousedown.clientX;
                const initialMouseY = e_mousedown.clientY;
                const initialChatX = chatWidget.offsetLeft;
                const initialChatY = chatWidget.offsetTop;

                // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ CSS
                const minWidth = parseInt(getComputedStyle(chatWidget).minWidth, 10) || 300;
                const minHeight = parseInt(getComputedStyle(chatWidget).minHeight, 10) || 200;

                function handleMouseMove(e_mousemove) {
                    const deltaX = e_mousemove.clientX - initialMouseX;
                    const deltaY = e_mousemove.clientY - initialMouseY;

                    let newWidth = initialWidth - deltaX;
                    let newHeight = initialHeight - deltaY;
                    let newLeft = initialChatX + deltaX;
                    let newTop = initialChatY + deltaY;

                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã "—è–∫–æ—Ä–µ–º" –±—ã–ª –ø—Ä–∞–≤—ã–π/–Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π
                    if (newWidth < minWidth) {
                        newLeft += (newWidth - minWidth); // –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ left, —á—Ç–æ–±—ã –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –Ω–µ "—É–µ—Ö–∞–ª"
                        newWidth = minWidth;
                    }
                    if (newHeight < minHeight) {
                        newTop += (newHeight - minHeight); // –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ top, —á—Ç–æ–±—ã –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π –Ω–µ "—É–µ—Ö–∞–ª"
                        newHeight = minHeight;
                    }

                    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
                    // if (newWidth > maxWidth) {
                    //     newLeft += (newWidth - maxWidth);
                    //     newWidth = maxWidth;
                    // }
                    // if (newHeight > maxHeight) {
                    //     newTop += (newHeight - maxHeight);
                    //     newHeight = maxHeight;
                    // }

                    chatWidget.style.width = newWidth + 'px';
                    chatWidget.style.height = newHeight + 'px';
                    chatWidget.style.left = newLeft + 'px';
                    chatWidget.style.top = newTop + 'px';
                }

                function handleMouseUp() {
                    document.removeEventListener('mousemove', handleMouseMove);
                    document.removeEventListener('mouseup', handleMouseUp);

                    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –≤ localStorage, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    // localStorage.setItem('chattyOrangeChatWidth', chatWidget.style.width);
                    // localStorage.setItem('chattyOrangeChatHeight', chatWidget.style.height);
                }

                document.addEventListener('mousemove', handleMouseMove);
                document.addEventListener('mouseup', handleMouseUp);
            });
        }
    }

    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º
    window.showAIAssistant = function() {
        createChatWidget();

        if (!isChatOpen) {
            if (aiChatBody && !isChatMinimized) {
                aiChatBody.innerHTML = '';
                appendMessageToChat('–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?', 'ai');
                appendQuickActions();
            }

            chatWidget.style.display = 'flex';
            isChatOpen = true;
            localStorage.setItem(CHAT_OPEN_STATE_KEY, 'true');

            if (isChatMinimized) {
                expandChat();
            }
        }

        if (window.hideMenu) window.hideMenu();
        return false;
    }

    window.minimizeChat = function() {
        if (!chatWidget) return;

        isChatMinimized = true;
        localStorage.setItem(CHAT_OPEN_STATE_KEY, 'true'); // Keep chat "open" conceptually
        chatWidget.classList.add('minimized');

        const minimizeBtn = chatWidget.querySelector('.chat-btn-minimize');
        const expandBtn = chatWidget.querySelector('.chat-btn-expand');

        if (minimizeBtn) minimizeBtn.style.display = 'none';
        if (expandBtn) expandBtn.style.display = 'inline-block';
    }

    window.expandChat = function() {
        if (!chatWidget) return;

        isChatMinimized = false;
        chatWidget.classList.remove('minimized');

        const minimizeBtn = chatWidget.querySelector('.chat-btn-minimize');
        const expandBtn = chatWidget.querySelector('.chat-btn-expand');

        if (minimizeBtn) minimizeBtn.style.display = 'inline-block';
        if (expandBtn) expandBtn.style.display = 'none';
    }

    window.closeChat = function() {
        if (!chatWidget) return;

        chatWidget.style.display = 'none';
        isChatOpen = false;
        localStorage.setItem(CHAT_OPEN_STATE_KEY, 'false');
        isChatMinimized = false;
    }

    // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    function appendQuickActions() {
        const quickActionsDiv = document.createElement('div');
        quickActionsDiv.className = 'quick-actions mt-3';
        quickActionsDiv.innerHTML = `
            <div class="d-flex flex-wrap gap-2 mb-2">
                <button class="btn btn-sm btn-outline-warning quick-action" data-action="help">
                    <i class="fas fa-question-circle"></i> –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?
                </button>
                <button class="btn btn-sm btn-outline-info quick-action" data-action="tour">
                    <i class="fas fa-route"></i> –¢—É—Ä –ø–æ —Å–∞–π—Ç—É
                </button>
            </div>
            <div class="d-flex flex-wrap gap-2">
                <button class="btn btn-sm btn-outline-success quick-action" data-action="ideas">
                    <i class="fas fa-lightbulb"></i> –ò–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤
                </button>
                <button class="btn btn-sm btn-outline-primary quick-action" data-action="stats">
                    <i class="fas fa-chart-line"></i> –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </button>
            </div>
        `;
        aiChatBody.appendChild(quickActionsDiv);

        quickActionsDiv.querySelectorAll('.quick-action').forEach(btn => {
            btn.addEventListener('click', function() {
                const action = this.dataset.action;
                handleQuickAction(action);
            });
        });
    }

    function handleQuickAction(action) {
        switch(action) {
            case 'help':
                currentActionType = 'faq';
                aiChatMessageInput.value = "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?";
                sendChatMessage();
                break;
            case 'tour':
                window.startInteractiveTour();
                break;
            case 'ideas':
                currentActionType = 'generate_post_ideas';
                appendMessageToChat("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤...", 'user');
                sendChatMessage();
                break;
            case 'stats':
                currentActionType = 'analyze_profile';
                appendMessageToChat("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", 'user');
                sendChatMessage();
                break;
        }
    }

    function appendMessageToChat(message, sender, scrollToMessage = false) {
        if (!aiChatBody) return;

        const messageDiv = document.createElement('div');
        messageDiv.classList.add(sender === 'user' ? 'user-message' : 'ai-message');

        if (sender === 'ai-thinking') {
            messageDiv.classList.remove('ai-message');
            messageDiv.classList.add('thinking');
        }

        if (sender === 'ai') {
            messageDiv.id = 'ai-message-' + Date.now();
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò —Å—Å—ã–ª–∫–∞–º–∏ (–ù–ï –∑–∞–∫—Ä—ã–≤–∞—é—Ç —á–∞—Ç)
        const formattedMessage = formatMessage(message);
        messageDiv.innerHTML = formattedMessage;

        aiChatBody.appendChild(messageDiv);

        if (sender === 'user') {
            aiChatBody.scrollTop = aiChatBody.scrollHeight;
        } else if (sender === 'ai' && scrollToMessage) {
            setTimeout(() => {
                const messageTop = messageDiv.offsetTop - 20;
                aiChatBody.scrollTo({
                    top: messageTop,
                    behavior: 'smooth'
                });
            }, 100);
        }

        if (typeof gsap !== 'undefined') {
            gsap.from(messageDiv, { opacity: 0, y: 20, duration: 0.3 });
        }

        return messageDiv;
    }

    function formatMessage(message) {
        let formatted = message
            .replace(/\n/g, '<br>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/__(.*?)__/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>');

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å—Å—ã–ª–∫–∏ –ù–ï –∑–∞–∫—Ä—ã–≤–∞—é—Ç —á–∞—Ç, –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ
        formatted = formatted.replace(
            /(–°—Å—ã–ª–∫–∞|—Å—Å—ã–ª–∫–∞):\s*(\/[^\s<]+)/g,
            '<a href="$2" class="chat-link" data-url="$2">–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a>'
        );

        formatted = formatted.replace(/([\u{1F300}-\u{1F9FF}])/gu, '<span class="emoji">$1</span>');

        return formatted;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º –≤ —á–∞—Ç–µ (–ù–ï –∑–∞–∫—Ä—ã–≤–∞—é—Ç —á–∞—Ç!)
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('chat-link')) {
            e.preventDefault();
            const url = e.target.getAttribute('data-url');
            if (url) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ –ë–ï–ó –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
                window.location.href = url;
            }
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    async function sendChatMessage() {
        if (!aiChatMessageInput) return;

        const messageText = aiChatMessageInput.value.trim();

        if (currentActionType === 'general_chat' && messageText) {
            const detectedType = detectCommandType(messageText);
            currentActionType = detectedType;
            console.log(`Auto-detected command type: ${detectedType} for message: "${messageText}"`);
        }

        if (messageText && currentActionType === 'general_chat') {
            appendMessageToChat(messageText, 'user');
        } else if (messageText && currentActionType !== 'general_chat') {
            appendMessageToChat(messageText, 'user');
        }

        if (aiChatMessageInput) {
            aiChatMessageInput.disabled = true;
        }
        if (aiSendMessageBtn) {
            aiSendMessageBtn.disabled = true;
        }

        const requestData = {
            action_type: currentActionType,
            user_input: messageText,
            user_info: {
                username: assistantContainer?.dataset.username || '–ì–æ—Å—Ç—å'
            }
        };

        const thinkingMessage = createThinkingMessage();
        aiChatBody.appendChild(thinkingMessage);

        try {
            const response = await fetch('/assistant/api/chat/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            });

            thinkingMessage.remove();

            if (!response.ok) {
                let errorDetail = response.statusText;
                try {
                    const errorData = await response.json();
                    errorDetail = errorData.error || errorData.detail || errorDetail;
                } catch (e) {}
                appendMessageToChat(`‚ùå –û—à–∏–±–∫–∞: ${errorDetail}`, 'ai');
                return;
            }

            const responseData = await response.json();
            appendMessageToChat(responseData.response, 'ai', true);

        } catch (error) {
            thinkingMessage.remove();
            console.error('–û—à–∏–±–∫–∞:', error);
            appendMessageToChat('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!', 'ai');
        } finally {
            if (aiChatMessageInput) {
                aiChatMessageInput.disabled = false;
                aiChatMessageInput.value = '';
                aiChatMessageInput.focus();
            }
            if (aiSendMessageBtn) {
                aiSendMessageBtn.disabled = false;
            }
            currentActionType = 'general_chat';
            resetActionButtons();
        }
    }

    function createThinkingMessage() {
        const thinkingDiv = document.createElement('div');
        thinkingDiv.className = 'thinking-message';
        thinkingDiv.innerHTML = `
            <div class="thinking-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
            <span class="thinking-text">–ê–ø–µ–ª—å—Å–∏–Ω–∫–∞ –¥—É–º–∞–µ—Ç...</span>
        `;
        return thinkingDiv;
    }

    function resetActionButtons() {
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.classList.remove('active');
        });
    }

    // Interactive Tour Functions (–æ—Å—Ç–∞—é—Ç—Å—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏)
    function initializeTourElements() {
        const modalElement = document.getElementById('interactiveTourModal');
        if (modalElement) {
            interactiveTourModal = new bootstrap.Modal(modalElement);
        }
        tourModalBody = document.getElementById('tourModalBody');
        tourStepNumberSpan = document.getElementById('tourStepNumber');
        nextTourStepBtn = document.getElementById('nextTourStepBtn');
        endTourBtn = document.getElementById('endTourBtn');
        closeTourModalBtn = document.getElementById('closeTourModalBtn');

        if (nextTourStepBtn && !nextButtonListenerAttached) {
            nextTourStepBtn.addEventListener('click', () => {
                if (currentTourStep >= MAX_TOUR_STEPS) {
                    completeTour();
                } else {
                    currentTourStep++;
                    if (currentTourStep <= MAX_TOUR_STEPS) {
                        showTourStep(currentTourStep);
                    } else {
                        completeTour();
                    }
                }
            });
            nextButtonListenerAttached = true;
        }
        if (endTourBtn) {
            endTourBtn.addEventListener('click', completeTour);
        }
        if (closeTourModalBtn) {
            closeTourModalBtn.addEventListener('click', completeTour);
        }
    }

    async function showTourStep(stepNumber) {
        if (!interactiveTourModal || !tourModalBody) return;

        tourModalBody.innerHTML = '<div class="text-center"><div class="spinner-border text-warning" role="status"></div></div>';
        interactiveTourModal.show();

        if (tourStepNumberSpan) {
            tourStepNumberSpan.textContent = stepNumber;
        }

        const requestData = {
            action_type: 'interactive_tour_step',
            step_number: stepNumber,
            user_info: {
                username: assistantContainer?.dataset.username || '–ì–æ—Å—Ç—å'
            }
        };

        try {
            const response = await fetch('/assistant/api/chat/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            });

            if (!response.ok) {
                tourModalBody.innerHTML = '<p class="text-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–≥–∞ —Ç—É—Ä–∞</p>';
                return;
            }

            const responseData = await response.json();
            tourModalBody.innerHTML = responseData.response;

            if (typeof gsap !== 'undefined') {
                gsap.from(tourModalBody.children, {
                    opacity: 0,
                    y: 30,
                    stagger: 0.1,
                    duration: 0.5
                });
            }

            if (nextTourStepBtn) {
                if (stepNumber >= MAX_TOUR_STEPS) {
                    nextTourStepBtn.textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç—å';
                } else {
                    nextTourStepBtn.textContent = '–î–∞–ª–µ–µ';
                }
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            tourModalBody.innerHTML = '<p class="text-danger">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</p>';
        }
    }

    function completeTour() {
        if (interactiveTourModal) {
            interactiveTourModal.hide();
        }
        localStorage.setItem(getTourStorageKey(), 'true');
        currentTourStep = 1;
        showCompletionMessage();
    }

    function showCompletionMessage() {
        const message = document.createElement('div');
        message.className = 'completion-message';
        message.innerHTML = `
            <div class="completion-content">
                <i class="fas fa-trophy fa-3x text-warning mb-3"></i>
                <h4>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ</h4>
                <p>–í—ã –ø—Ä–æ—à–ª–∏ —Ç—É—Ä –ø–æ Chatty Orange!</p>
                <button class="btn btn-warning" onclick="this.parentElement.parentElement.remove()">–û—Ç–ª–∏—á–Ω–æ!</button>
            </div>
        `;
        document.body.appendChild(message);

        if (typeof gsap !== 'undefined') {
            gsap.from(message, {
                scale: 0,
                opacity: 0,
                duration: 0.5,
                ease: "back.out(1.7)"
            });
        }
    }

    window.startInteractiveTour = function() {
        if (localStorage.getItem(getTourStorageKey()) === 'true') {
            if (confirm("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç—É—Ä. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞?")) {
                localStorage.removeItem(getTourStorageKey());
            } else {
                return false;
            }
        }
        currentTourStep = 1;
        initializeTourElements();
        showTourStep(currentTourStep);
        if (window.hideMenu) window.hideMenu();
        return false;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –º–µ–Ω—é
    document.addEventListener('click', function(event) {
        if (event.target && event.target.id === 'startTourBtn') {
            event.preventDefault();
            window.startInteractiveTour();
        }

        if (event.target.matches('#showRecommendationsBtn') || event.target.closest('#showRecommendationsBtn')) {
            event.preventDefault();
            if (window.hideMenu) window.hideMenu();
            showRecommendations();
        }

        if (event.target.matches('#showProfileStatsBtn') || event.target.closest('#showProfileStatsBtn')) {
            event.preventDefault();
            if (window.hideMenu) window.hideMenu();
            showProfileStats();
        }

        if (event.target.matches('#showPostIdeasBtn') || event.target.closest('#showPostIdeasBtn')) {
            event.preventDefault();
            if (window.hideMenu) window.hideMenu();
            showPostIdeas();
        }
    });

    // –§—É–Ω–∫—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    async function showRecommendations() {
        window.showAIAssistant();
        currentActionType = 'subscription_recommendations';
        setTimeout(() => {
            sendChatMessage();
        }, 500);
    }

    async function showProfileStats() {
        window.showAIAssistant();
        currentActionType = 'analyze_profile';
        setTimeout(() => {
            sendChatMessage();
        }, 500);
    }

    async function showPostIdeas() {
        window.showAIAssistant();
        currentActionType = 'generate_post_ideas';
        setTimeout(() => {
            sendChatMessage();
        }, 500);
    }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ (–¥–ª—è –ø—Ä–∞–≤–∏–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π)
    window.showRules = function() {
        const rulesModalElement = document.getElementById('rulesModal');
        if (rulesModalElement) {
            const rulesModal = new bootstrap.Modal(rulesModalElement);
            if (rulesModal) rulesModal.show();
        }
        if (window.hideMenu) window.hideMenu();
        return false;
    }

    window.showGuide = function() {
        const guideModalElement = document.getElementById('guideModal');
        if (guideModalElement) {
            const guideModal = new bootstrap.Modal(guideModalElement);
            if (guideModal) guideModal.show();
        }
        if (window.hideMenu) window.hideMenu();
        return false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initializeTourElements();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç —Ä–∞–Ω–µ–µ
    const chatWasOpen = localStorage.getItem(CHAT_OPEN_STATE_KEY);
    if (chatWasOpen === 'true') {
        if (typeof window.showAIAssistant === 'function') {
            // showAIAssistant —Å–∞–º–∞ –≤—ã–∑–æ–≤–µ—Ç createChatWidget, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            window.showAIAssistant();
        }
    }

    // Post Creation Helper
    const getPostSuggestionBtn = document.getElementById('getPostSuggestionBtn');
    const postSuggestionArea = document.getElementById('postSuggestionArea');

    if (getPostSuggestionBtn && postSuggestionArea) {
        getPostSuggestionBtn.addEventListener('click', async function() {
            let currentPostText = '';
            if (typeof CKEDITOR !== 'undefined' && CKEDITOR.instances.id_text) {
                currentPostText = CKEDITOR.instances.id_text.getData();
            } else {
                const plainTextArea = document.getElementById('id_text');
                if (plainTextArea) {
                    currentPostText = plainTextArea.value;
                }
            }

            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> –î—É–º–∞—é...';
            postSuggestionArea.style.display = 'none';

            const requestData = {
                action_type: 'post_creation_suggestion',
                current_text: currentPostText,
                user_info: {
                    username: assistantContainer?.dataset.username || '–ì–æ—Å—Ç—å'
                }
            };

            try {
                const response = await fetch('/assistant/api/chat/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                if (!response.ok) {
                    postSuggestionArea.innerHTML = '<p class="text-danger">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</p>';
                } else {
                    const responseData = await response.json();
                    postSuggestionArea.innerHTML = formatMessage(responseData.response);
                }
            } catch (error) {
                postSuggestionArea.innerHTML = '<p class="text-danger">–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</p>';
            } finally {
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-lightbulb me-1"></i> –ü–æ–º–æ—â—å –ò–ò —Å –ø–æ—Å—Ç–æ–º';
                postSuggestionArea.style.display = 'block';

                if (typeof gsap !== 'undefined') {
                    gsap.from(postSuggestionArea, {
                        opacity: 0,
                        height: 0,
                        duration: 0.3
                    });
                }
            }
        });
    }

    // Post Content Check
    const checkPostContentBtn = document.getElementById('checkPostContentBtn');
    const postCheckResultArea = document.getElementById('postCheckResultArea');

    if (checkPostContentBtn && postCheckResultArea) {
        checkPostContentBtn.addEventListener('click', async function() {
            let currentPostText = '';
            if (typeof CKEDITOR !== 'undefined' && CKEDITOR.instances.id_text) {
                currentPostText = CKEDITOR.instances.id_text.getData();
            } else {
                const plainTextArea = document.getElementById('id_text');
                if (plainTextArea) {
                    currentPostText = plainTextArea.value;
                }
            }

            if (!currentPostText.trim()) {
                postCheckResultArea.innerHTML = '<p class="text-warning">–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</p>';
                postCheckResultArea.style.display = 'block';
                return;
            }

            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> –ü—Ä–æ–≤–µ—Ä—è—é...';

            const requestData = {
                action_type: 'check_post_content',
                user_input: currentPostText,
                user_info: {
                    username: assistantContainer?.dataset.username || '–ì–æ—Å—Ç—å'
                }
            };

            try {
                const response = await fetch('/assistant/api/chat/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                if (!response.ok) {
                    postCheckResultArea.innerHTML = '<p class="text-danger">–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</p>';
                } else {
                    const responseData = await response.json();
                    postCheckResultArea.innerHTML = formatMessage(responseData.response);

                    if (responseData.response.includes('‚úÖ')) {
                        postCheckResultArea.className = 'mt-2 p-3 border rounded alert-success';
                    } else {
                        postCheckResultArea.className = 'mt-2 p-3 border rounded alert-warning';
                    }
                }
            } catch (error) {
                postCheckResultArea.innerHTML = '<p class="text-danger">–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</p>';
            } finally {
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-shield-alt me-1"></i> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç';
                postCheckResultArea.style.display = 'block';
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!localStorage.getItem('chattyOrangeReturningUser')) {
        setTimeout(() => {
            if (!localStorage.getItem(getTourStorageKey())) {
                showWelcomeMessage();
            }
        }, 3000);
        localStorage.setItem('chattyOrangeReturningUser', 'true');
    }

    // Welcome message logic should ideally run after checking chat state,
    // so it doesn't conflict with an auto-opened chat.
    // The current placement of chat state check (before Post Creation Helper)
    // and this welcome message check (at the very end) is fine.

    function showWelcomeMessage() {
        const welcomeDiv = document.createElement('div');
        welcomeDiv.className = 'welcome-popup';
        welcomeDiv.innerHTML = `
            <div class="welcome-content">
                <img src="/static/images/orange.png" alt="Orange" style="width: 50px;">
                <p>–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫! üçä</p>
                <p>–•–æ—á–µ—à—å —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–π—Ç–æ–º?</p>
                <button class="btn btn-warning btn-sm" onclick="window.startInteractiveTour(); this.parentElement.parentElement.remove();">
                    –î–∞, –ø–æ–∫–∞–∂–∏!
                </button>
                <button class="btn btn-outline-secondary btn-sm" onclick="this.parentElement.parentElement.remove();">
                    –ü–æ–∑–∂–µ
                </button>
            </div>
        `;
        document.body.appendChild(welcomeDiv);

        if (typeof gsap !== 'undefined') {
            gsap.from(welcomeDiv, {
                y: 100,
                opacity: 0,
                duration: 0.5,
                ease: "back.out(1.7)"
            });
        }
    }
});