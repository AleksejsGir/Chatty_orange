
services:
  # Сервис базы данных PostgreSQL
  db:
    image: postgres:15 # Используем официальный образ PostgreSQL версии 15
    container_name: chatty_db # Имя контейнера для удобства
    volumes:
      - postgres_data:/var/lib/postgresql/data # Сохраняем данные БД в именованный том
    env_file:
      - .env # Загружаем переменные окружения из .env файла
    environment:
      # Переменные для инициализации базы данных PostgreSQL
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432" # Маппим порт БД на хост (5433) для возможного внешнего доступа
    networks:
      - chatty_network # Подключаем к общей сети
    # --- Проверка состояния контейнера PostgreSQL ---
    healthcheck:
      # Команда для проверки готовности PostgreSQL принимать подключения
      test: ["CMD-SHELL", "pg_isready -U admin -d orange_db"]
      interval: 5s    # Интервал между проверками
      timeout: 5s     # Таймаут ожидания ответа от проверки
      retries: 5      # Количество попыток перед признанием контейнера нездоровым
    # --- Конец блока healthcheck ---

  # Сервис веб-приложения Django
  web:
    build: . # Собираем образ из Dockerfile в текущей директории
    container_name: chatty_web # Имя контейнера
    command: python manage.py runserver 0.0.0.0:8000 # Команда для запуска Django
    volumes:
      - .:/app/ # Монтируем текущую директорию для live-reload кода
    ports:
      - "8000:8000" # Маппим порт 8000 контейнера на порт 8000 хоста
    env_file:
      - .env # Загружаем переменные окружения из .env файла
    depends_on:
      # --- Условие зависимости от состояния сервиса db ---
      db:
        condition: service_healthy # Запускать web только после того, как db пройдет healthcheck
      # --- Конец блока depends_on ---
    networks:
      - chatty_network # Подключаем к общей сети

# Определяем сети
networks:
  chatty_network:
    driver: bridge # Стандартный драйвер сети

# Определяем именованные тома
volumes:
  postgres_data: # Именованный том для персистентного хранения данных PostgreSQL

# <!-- TODO: Для production рассмотреть использование отдельного сервиса для статики (Nginx). -->
# <!-- TODO: Добавить другие сервисы при необходимости (Redis, Celery). -->