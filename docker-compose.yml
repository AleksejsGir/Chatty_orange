# docker-compose.yml
services:
  db:
    image: postgres:15
    container_name: chatty_db
    volumes:
      - postgres_data:/var/lib/postgresql/data # Убедитесь, что здесь нет опечатки (было /data/)
    env_file:
      - .env
    environment:
      # Переменные для инициализации базы данных PostgreSQL
      # Используем двоеточие, а не дефис для YAML словаря
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      - chatty_network
    healthcheck:
      # Используем переменные окружения, которые PostgreSQL сам подхватит при инициализации
      # и которые доступны внутри контейнера через env_file
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    # --- Конец блока healthcheck ---

  # Сервис веб-приложения Django
  web:
    build: . # Собираем образ из Dockerfile в текущей директории
    container_name: chatty_web # Имя контейнера
    command: python manage.py runserver 0.0.0.0:8000 # Команда для запуска Django
    volumes:
      - .:/app/ # Монтируем текущую директорию для live-reload кода
    ports:
      - "8000:8000" # Маппим порт 8000 контейнера на порт 8000 хоста
    env_file:
      - .env # Загружаем переменные окружения из .env файла
    depends_on:
      # --- Условие зависимости от состояния сервиса db ---
      db:
        condition: service_healthy # Запускать web только после того, как db пройдет healthcheck
      # --- Конец блока depends_on ---
    networks:
      - chatty_network # Подключаем к общей сети

# Определяем сети
networks:
  chatty_network:
    driver: bridge # Стандартный драйвер сети

# Определяем именованные тома
volumes:
  postgres_data: # Именованный том для персистентного хранения данных PostgreSQL

