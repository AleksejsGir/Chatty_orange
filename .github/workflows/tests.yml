name: Django Tests with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file for CI
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci-docker" > .env
        echo "DEBUG=True" >> .env
        echo "DB_ENGINE=django.db.backends.postgresql" >> .env
        echo "DB_NAME=chatty" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "DB_HOST=db" >> .env
        echo "DB_PORT=5432" >> .env
        echo "GOOGLE_API_KEY=test-api-key-for-ci-testing" >> .env
        echo "ALLOWED_HOSTS=localhost,testserver,127.0.0.1" >> .env

    - name: Build and start services
      run: |
        docker-compose up -d db
        docker-compose build web

    - name: Wait for database
      run: |
        timeout 60s bash -c 'until docker-compose exec -T db pg_isready -U postgres; do sleep 2; done'

    - name: Run migrations
      run: |
        docker-compose run --rm web python manage.py migrate

    - name: Run tests with coverage
      run: |
        docker-compose run --rm \
          -v $(pwd):/app \
          web pytest \
          --cov=. \
          --cov-report=xml:/app/coverage.xml \
          --cov-report=term-missing \
          --cov-fail-under=60

    - name: Show coverage file
      if: always()
      run: |
        ls -la coverage.xml || echo "Coverage file not found"
        cat coverage.xml | head -20 || echo "Cannot read coverage file"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: AleksejsGir/Chatty_orange

    - name: Show test results summary
      if: always()
      run: |
        echo "üê≥ Docker tests completed!"
        docker-compose ps
        echo "üìä Coverage report generated"

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f --volumes